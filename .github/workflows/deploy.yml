name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  ## ------------------------
  ## üîç CI: Lint & Build
  ## ------------------------
  ci:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [welcome-portal-app-web-ui, welcome-portal-app-mngr]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci
        env:
          BDB_TOKEN: ${{ secrets.BDB_TOKEN }}

      - name: Lint
        run: |
          cd ${{ matrix.project }}
          npm run lint

      - name: Build
        run: |
          cd ${{ matrix.project }}
          npm run build

  ## ------------------------
  ## üöÄ CD: Deploy IaC
  ## ------------------------

  cd-iac:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::006217752323:role/rolGitHub
          aws-region: us-east-1
          audience: "sts.amazonaws.com"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install backend dependencies
        run: |
          cd welcome-portal-app-mngr
          npm ci

      - name: Build backend
        run: |
          cd welcome-portal-app-mngr
          npm run build

      - name: Package backend
        run: |
          cd welcome-portal-app-mngr
          mkdir lambda
          cp -r build/* lambda/
          cp package.json lambda/
          cp index.js lambda/
          cd lambda
          npm install --only=prod
          npx prisma generate
          zip -r ../../lambda.zip .

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: terraform init
        working-directory: IaC

      - name: Terraform Validate
        run: terraform validate
        working-directory: IaC

      - name: Terraform Plan
        run: terraform plan 
        working-directory: IaC
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL}}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL}}
        working-directory: IaC

      - name: Terraform Output
        if: github.ref == 'refs/heads/main'
        run: terraform output -json
        working-directory: IaC

  # ## ------------------------
  # ## üöÄ CD: Deploy Frontend
  # ## ------------------------
  cd-frontend:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend dependencies
        run: |
          cd welcome-portal-app-web-ui
          npm ci
        env:
          BDB_TOKEN: ${{ secrets.BDB_TOKEN }}

      - name: Build frontend
        run: |
          cd welcome-portal-app-web-ui
          npm run build
        env:
          NEXT_PUBLIC_API_URL: https://45k2wnkw19.execute-api.us-east-1.amazonaws.com/prod/
          NEXT_PUBLIC_ENVIRONMENT: PROD
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::006217752323:role/rolGitHub
          aws-region: us-east-1
          audience: "sts.amazonaws.com"

      - name: Deploy to S3
        run: |
          aws s3 sync welcome-portal-app-web-ui/out s3://portal-challenge-frontend --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id E10EU35UCXCSX0 --paths "/*"
